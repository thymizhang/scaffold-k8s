# spring-cloud2020\u7248\u672C\uFF0Cyml\u6587\u4EF6\u6BD4properties\u6587\u4EF6\u4F18\u5148\u7EA7\u9AD8
spring.application.name = service-project

server.port = ${port:8084}

spring.main.allow-bean-definition-overriding = true


### nacos

#spring.cloud.nacos.config.server-addr = nacos.gceasy.cc:8848
#spring.cloud.nacos.config.prefix = service-project
#spring.cloud.nacos.config.file-extension = properties
#spring.cloud.nacos.config.namespace = SCAFFOLD-DEV
#spring.cloud.nacos.config.group = SCAFFOLD

spring.cloud.nacos.discovery.server-addr = nacos.gceasy.cc:8848
spring.cloud.nacos.discovery.namespace = SCAFFOLD-DEV


### mybatis-plus
# \u5173\u95ED\u63A7\u5236\u53F0\u8F93\u51FAsql\u4FE1\u606F
mybatis-plus.configuration.log-impl = org.apache.ibatis.logging.nologging.NoLoggingImpl
# \u9A7C\u5CF0\u6620\u5C04\u89C4\u5219,\u6BD4\u5982\u5B57\u6BB5company_name,\u6620\u5C04\u4E3A\u5BF9\u8C61\u5C5E\u6027\u5C31\u662FcompanyName
mybatis-plus.configuration.map-underscore-to-camel-case = true


### sharding-jdbc

# \u6570\u636E\u6E90:m0,s0,m1,s1
spring.shardingsphere.datasource.names = m0,s0,m1,s1

spring.shardingsphere.datasource.m0.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m0.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.jdbc-url = jdbc:mysql://mysqlmaster.gceasy.cc:3306/scaffold_project_0?useSSL=false&serverTimezone=Hongkong&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.m0.username = root
spring.shardingsphere.datasource.m0.password = test2020

spring.shardingsphere.datasource.s0.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.s0.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.s0.jdbc-url = jdbc:mysql://mysqlslave.gceasy.cc:3306/scaffold_project_0?useSSL=false&serverTimezone=Hongkong&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.s0.username = readman
spring.shardingsphere.datasource.s0.password = test2020

spring.shardingsphere.datasource.m1.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.jdbc-url = jdbc:mysql://mysqlmaster.gceasy.cc:3306/scaffold_project_1?useSSL=false&serverTimezone=Hongkong&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = test2020

spring.shardingsphere.datasource.s1.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.s1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.s1.jdbc-url = jdbc:mysql://mysqlslave.gceasy.cc:3306/scaffold_project_1?useSSL=false&serverTimezone=Hongkong&useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.s1.username = readman
spring.shardingsphere.datasource.s1.password = test2020

# \u8BFB\u5199\u5206\u79BB\u3001\u4E3B\u4ECE\u5173\u7CFB\u914D\u7F6E
spring.shardingsphere.sharding.master-slave-rules.ms0.master-data-source-name = m0
spring.shardingsphere.sharding.master-slave-rules.ms0.slave-data-source-names = s0
spring.shardingsphere.sharding.master-slave-rules.ms1.master-data-source-name = m1
spring.shardingsphere.sharding.master-slave-rules.ms1.slave-data-source-names = s1

# \u9ED8\u8BA4\u5206\u5E93\u7B56\u7565\uFF0C\u6839\u636Ecompany_id\u5B57\u6BB5\u5206\u5E93\uFF0Ccompany_id\u53D6\u6A212\uFF0C\u5B9A\u4F4D\u5230\u4E0D\u540C\u7684\u5E93
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = company_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = ms$->{company_id % 2}

# project_info\u5206\u8868\u7B56\u7565\uFF0C\u6CA1\u6709\u6C34\u5E73\u5206\u8868\u65F6\uFF0C\u76F4\u63A5\u5199\u8868\u540D
spring.shardingsphere.sharding.tables.project_info.actual-data-nodes = ms$->{0..1}.project_info
spring.shardingsphere.sharding.tables.project_info.table-strategy.inline.sharding-column = id
spring.shardingsphere.sharding.tables.project_info.table-strategy.inline.algorithm-expression = project_info
spring.shardingsphere.sharding.tables.project_info.key-generator.column = id
spring.shardingsphere.sharding.tables.project_info.key-generator.type = SNOWFLAKE

# project_budget\u5206\u8868\u7B56\u7565\uFF0C\u6839\u636Eproject_id\u5B57\u6BB5\u5206\u7247\uFF0C\u5206\u7247\u7B97\u6CD5\uFF1Aproject_id\u53D6\u6A212\uFF0C\u5B9A\u4F4D\u5230\u4E0D\u540C\u7684\u8868
spring.shardingsphere.sharding.tables.project_budget.actual-data-nodes = ms$->{0..1}.project_budget_$->{0..1}
spring.shardingsphere.sharding.tables.project_budget.table-strategy.inline.sharding-column = project_id
spring.shardingsphere.sharding.tables.project_budget.table-strategy.inline.algorithm-expression = project_budget_$->{project_id % 2}
spring.shardingsphere.sharding.tables.project_budget.key-generator.column = id
spring.shardingsphere.sharding.tables.project_budget.key-generator.type = SNOWFLAKE

# \u8BBE\u7F6E\u7ED1\u5B9A\u8868
#spring.shardingsphere.sharding.binding-tables[0] = project_info,project_description

# \u8BBE\u7F6E\u5E7F\u64AD\u8868(\u516C\u5171\u8868)\uFF0C\u6BCF\u6B21\u66F4\u65B0\u64CD\u4F5C\u4F1A\u53D1\u9001\u81F3\u6240\u6709\u6570\u636E\u6E90
#spring.shardingsphere.sharding.broadcast-tables = combo

# \u5F00\u542FSQL\u663E\u793A\uFF0C\u9ED8\u8BA4false
spring.shardingsphere.props.sql.show = false


### redis
# \u6CE8\u610F: \u4F7F\u7528\u8FDE\u63A5\u6C60\u9700\u8981\u52A0\u5165commons-pool2\u4F9D\u8D56
spring.redis.database = 0
spring.redis.host = redis.gceasy.cc
# \u9ED8\u8BA46379\uFF0C\u53EF\u7701\u7565
spring.redis.port = 6379
# \u8FDE\u63A5\u8D85\u65F6\u65F6\u957F\uFF08\u6BEB\u79D2\uFF09
spring.redis.timeout = 30000
# \u8FDE\u63A5\u6C60\u6700\u5927\u8FDE\u63A5\u6570\uFF08\u4F7F\u7528\u8D1F\u503C\u8868\u793A\u6CA1\u6709\u9650\u5236\uFF09
spring.redis.lettuce.pool.max-active = 1000
# \u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5927\u7A7A\u95F2\u8FDE\u63A5
spring.redis.lettuce.pool.max-idle = 10
# \u8FDE\u63A5\u6C60\u4E2D\u7684\u6700\u5C0F\u7A7A\u95F2\u8FDE\u63A5
spring.redis.lettuce.pool.min-idle = 5
# \u8FDE\u63A5\u6C60\u6700\u5927\u963B\u585E\u7B49\u5F85\u65F6\u95F4\uFF08\u4F7F\u7528\u8D1F\u503C\u8868\u793A\u6CA1\u6709\u9650\u5236\uFF09
spring.redis.lettuce.pool.max-wait = -1


### rabbitmq
spring.rabbitmq.host = rabbitmq.gceasy.cc
spring.rabbitmq.port = 5672
spring.rabbitmq.username = root
spring.rabbitmq.password = runhui802


### springfox
# swagger-ui\u5730\u5740\uFF1Ahttp://ip:port/swagger-ui/index.html
springfox.documentation.swagger-ui.enabled = false


### \u5065\u5EB7\u68C0\u67E5\u914D\u7F6E
# \u4F9D\u8D56spring-boot-starter-actuator\uFF0C\u66B4\u9732health\u3001info\u63A5\u53E3
management.endpoints.web.exposure.include = health,info


### \u65E5\u5FD7\u8F93\u51FA\u7EA7\u522B\uFF0C\u9ED8\u8BA4\u7EA7\u522B\uFF1Ainfo
logging.level.root = error